{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","give","className","city","country","temp_celsius","weatherIcon","description","Form","error","onSubmit","loadweather","type","placeholder","name","size","width","App","getWeather","e","a","preventDefault","target","elements","value","fetch","process","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","getWeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","idrange","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6958ddae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (give) => {\r\n    return(\r\n    \r\n    <div className=\"cont2\">\r\n    <h2>{give.city} {give.country} </h2>\r\n    \r\n    {give.temp_celsius ? (<h3 className=\"py-2\">{give.temp_celsius}&deg;</h3>):null}\r\n    <h4 className=\"py-4\">\r\n    <i className={`wi ${give.weatherIcon}`} ></i> \r\n    </h4>\r\n    <h4 className=\"py-3\">{give.description}</h4>  \r\n    </div>\r\n        \r\n    \r\n    );\r\n};\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.css';\r\n\r\nconst Form = give => {\r\n  return (\r\n    <div className=\"container1\">\r\n    <h1>Weather App ReactJS</h1> \r\n    <div className=\"container\">\r\n        <div>{give.error ? error() : null}</div>\r\n        \r\n      <form onSubmit={give.loadweather}>\r\n        <div className=\"row\">\r\n            \r\n          <div className=\"col-md-3 \">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Type in a City\"\r\n              name=\"city\"\r\n              size=\"30\"\r\n            />\r\n          </div>\r\n          <br></br>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Type in a Country\"\r\n              name=\"country\"\r\n              size=\"30\"\r\n              width=\"30\"\r\n            />\r\n          </div>\r\n          <br/><br/>\r\n          <div className=\"col-md-3\">\r\n            <button className=\"btn btn-warning\" >Search for Weather</button>\r\n          </div>\r\n        </div>\r\n     </form>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error()\r\n{\r\n return(\r\n    <div className=\"alert\" >\r\n        Enter a CityName and a CountryName\r\n    </div>\r\n );\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\n\n\n\nconst API_key=  process.env.REACT_APP_WEATHER_API_KEY;\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      description:\"\",\n      error: false\n    };\n    \n    \n    this.weatherIcon = {\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain : \"wi-rain\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\",\n    };\n  }\n\n  calCelsius(temp)\n  {\n    let cel=Math.floor(temp-273.15)\n    return cel;\n  }\n\n  getWeatherIcon(icons,idrange)\n  {\n    switch(true)\n    {\n      case idrange >=200 && idrange<=232:\n       this.setState({icon:this.weatherIcon.Thunderstorm});\n       break;\n      case idrange >=300 && idrange<=321:\n       this.setState({icon:this.weatherIcon.Drizzle});\n       break; \n      case idrange >=500 && idrange<=531:\n       this.setState({icon:this.weatherIcon.Rain});\n       break;\n       case idrange >=600 && idrange<=622:\n       this.setState({icon:this.weatherIcon.Snow});\n       break;\n      case idrange >=701 && idrange<=781:\n       this.setState({icon:this.weatherIcon.Atmosphere});\n       break;\n      case idrange ===800:\n       this.setState({icon:this.weatherIcon.Clear});\n       break;\n      case idrange >=801 && idrange<=804:\n       this.setState({icon:this.weatherIcon.Clouds});\n       break;\n      default:\n       this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n \n  getWeather = async (e) =>{\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n  if(city && country) \n  {\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n    const response = await api_call.json();\n    console.log(response);\n\n    this.setState({\n      city:`${response.name}, ${response.sys.country}`,\n      \n      celsius:this.calCelsius(response.main.temp),\n      description:response.weather[0].description,\n      \n    });\n    this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n  }\n  else\n  this.setState({error:true});\n  };\n render(){\n  return (\n    <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error}/>\n    <Weather \n    city={this.state.city} \n    country={this.state.country}\n    temp_celsius={this.state.celsius}\n    description={this.state.description}\n    weatherIcon={this.state.icon}\n    />\n    </div>\n  );\n }  \n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}